# llm_autodoc/services/doc_generator.py
import os
from pathlib import Path
from typing import Any, Dict

from jinja2 import Environment, FileSystemLoader, Template


class DocGenerator:
    def __init__(self, template_dir: str = None):
        if template_dir is None:
            # Use package templates directory
            package_dir = Path(__file__).parent.parent
            self.template_dir = package_dir / "templates"
        else:
            self.template_dir = Path(template_dir)

        self.env = Environment(
            loader=FileSystemLoader(str(self.template_dir)),
            trim_blocks=True,
            lstrip_blocks=True,
        )
        print(f"DocGenerator initialized. Template directory: {self.template_dir}")

    def render_readme(
        self,
        template_name: str = "readme_template.md",
        context_data: Dict[str, Any] = None,
    ) -> str:
        """
        Render README using Jinja2 template.

        Args:
            template_name: Name of the template file
            context_data: Data to render in template

        Returns:
            Rendered README content
        """
        if context_data is None:
            context_data = {}

        print(f"[DocGenerator] Rendering template: {template_name}")
        print(f"[DocGenerator] Context data keys: {list(context_data.keys())}")

        # If context_data is a string (LLM output), return as is
        if isinstance(context_data, str):
            return context_data

        try:
            template = self.env.get_template(template_name)
            rendered = template.render(**context_data)
            print("[DocGenerator] Template rendered successfully.")
            return rendered
        except Exception as e:
            print(f"[DocGenerator] Error rendering template: {e}")
            # Fallback to simple format
            return self._generate_fallback_readme(context_data)

    def _generate_fallback_readme(self, context_data: Dict[str, Any]) -> str:
        """Generate a simple README when template rendering fails."""
        project_name = context_data.get("project_name", "Project")
        description = context_data.get("description", "No description available")

        output = f"# {project_name}\n\n"
        output += f"{description}\n\n"
        output += "## Installation\n\n"
        output += "```bash\npip install .\n```\n\n"
        output += "## Usage\n\n"
        output += "See documentation for usage instructions.\n\n"
        output += "*Generated by DocGenerator (Fallback)*"

        return output
