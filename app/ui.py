# app/ui.py
import os
import sys

import matplotlib.pyplot as plt
import networkx as nx
import pandas as pd
import plotly.express as px
from matplotlib.style.core import available

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ 'app') –≤ sys.path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

import logging

import streamlit as st
from dotenv import load_dotenv

from app.services.ast_analyzer import AstAnalyzer
from app.services.doc_generator import (
    DocGenerator,  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ README, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω
)
from app.services.github_parser import GithubParser
from app.services.llm_agent import LlmAgent  # –£–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –≤—Å–µ –æ–∫

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞

# Configure logging for main UI
logging.basicConfig(level=logging.INFO)
ui_logger = logging.getLogger("ui_main")

# --- –ù–æ–≤—ã–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ Lamoda Tech ---
LAMODA_LIME_ACCENT = "#CDFE00"
LAMODA_BLACK_BG = "#000000"
LAMODA_WHITE_TEXT = "#FFFFFF"
LAMODA_BLACK_TEXT_ON_LIME = "#000000"
LAMODA_DARK_GRAY_SUBTLE = "#1A1A1A"
LAMODA_MID_GRAY_BORDER = "#333333"
LAMODA_LIGHT_GRAY_TEXT = "#B8B8B8"

st.set_page_config(
    page_title="AI AutoDoc Generator",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.markdown(
    f"""
<style>
    /* ... (–≤–∞—à–∏ —Å—Ç–∏–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */
    body {{
        color: {LAMODA_WHITE_TEXT};
    }}
    .main .block-container {{
        background-color: {LAMODA_BLACK_BG};
        padding-top: 2rem;
        padding-bottom: 2rem;
        color: {LAMODA_WHITE_TEXT};
    }}
    .stButton button {{
        border-radius: 8px;
        font-weight: 600;
        border: none;
        padding: 0.6rem 1.2rem;
    }}
    .stButton button[data-testid="baseButton-secondary"],
    .stDownloadButton button {{
        background-color: {LAMODA_LIME_ACCENT};
        color: {LAMODA_BLACK_TEXT_ON_LIME};
    }}
    .stButton button[data-testid="baseButton-secondary"]:hover,
    .stDownloadButton button:hover {{
        background-color: #B8E400;
        color: {LAMODA_BLACK_TEXT_ON_LIME};
    }}
    .stTextInput input,
    .stSelectbox div[data-baseweb="select"] > div,
    .stTextArea textarea {{
        background-color: {LAMODA_DARK_GRAY_SUBTLE};
        color: {LAMODA_WHITE_TEXT};
        border: 1px solid {LAMODA_MID_GRAY_BORDER};
        border-radius: 8px;
    }}
    .stTextInput input:focus,
    .stTextArea textarea:focus {{
        border-color: {LAMODA_LIME_ACCENT};
        box-shadow: 0 0 0 0.1rem {LAMODA_LIME_ACCENT}40;
    }}
    .stTextInput ::placeholder,
    .stTextArea ::placeholder {{
        color: #888888;
    }}
    .sidebar .sidebar-content {{
        background-color: {LAMODA_BLACK_BG};
        padding: 2rem 1.5rem;
    }}
    div[data-testid="stSidebarNavItems"] {{
        padding-top: 1rem;
    }}
    .sidebar .sidebar-content h1,
    .sidebar .sidebar-content h2,
    .sidebar .sidebar-content h3,
    .sidebar .sidebar-content p,
    .sidebar .sidebar-content label {{
        color: {LAMODA_WHITE_TEXT} !important;
    }}
    h1, h2, h3, h4, h5, h6 {{
        color: {LAMODA_WHITE_TEXT};
        font-weight: 600;
    }}
    .lamoda-lime-text {{
        color: {LAMODA_LIME_ACCENT};
    }}
    .readme-container {{
        background-color: {LAMODA_DARK_GRAY_SUBTLE};
        color: {LAMODA_WHITE_TEXT};
        padding: 1.5rem;
        border-radius: 8px;
        border: 1px solid {LAMODA_MID_GRAY_BORDER};
        margin-top: 1.5rem;
        max-height: 70vh;
        overflow-y: auto;
    }}
    .readme-container h1, .readme-container h2, .readme-container h3 {{
        margin-top: 1em;
        margin-bottom: 0.5em;
        color: {LAMODA_LIME_ACCENT};
    }}
    .readme-container p {{
        line-height: 1.6;
        color: {LAMODA_WHITE_TEXT};
    }}
    .readme-container code {{
        background-color: {LAMODA_MID_GRAY_BORDER};
        color: {LAMODA_LIME_ACCENT};
        padding: 0.2em 0.4em;
        border-radius: 4px;
        font-size: 0.9em;
    }}
    .readme-container pre {{
        background-color: {LAMODA_BLACK_BG};
        border: 1px solid {LAMODA_MID_GRAY_BORDER};
        padding: 1em;
        border-radius: 6px;
        overflow-x: auto;
    }}
    .readme-container pre code {{
        background-color: transparent !important;
        color: {LAMODA_WHITE_TEXT};
        padding: 0;
    }}
    .logo-text-la {{
        color: {LAMODA_WHITE_TEXT};
    }}
    .logo-text-tech {{
        color: {LAMODA_LIME_ACCENT};
        font-weight: 700;
    }}
</style>
""",
    unsafe_allow_html=True,
)


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ ---
@st.cache_resource
def get_services():
    github_token = os.getenv("GITHUB_TOKEN_AUTODOC")
    openrouter_api_key = os.getenv("OPENROUTER_API_KEY")  # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è OpenRouter

    if not github_token:
        st.sidebar.error(
            "GITHUB_TOKEN_AUTODOC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ."
        )
        st.stop()

    # –ö–ª—é—á –¥–ª—è LLM –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–Ω—ã–º –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∞–º–æ–≥–æ UI,
    # –Ω–æ LLM —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–µ–≥–æ.
    # LlmAgent —Å–∞–º –≤—ã–≤–µ–¥–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å st.sidebar.warning, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.
    if not openrouter_api_key:
        st.sidebar.warning(
            "OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LLM –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É."
        )

    return {
        "github_parser": GithubParser(github_token=github_token),
        "ast_analyzer": AstAnalyzer(),
        "llm_agent": LlmAgent(
            openrouter_api_key=openrouter_api_key
        ),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
        "doc_generator": DocGenerator(
            template_dir="app/templates"
        ),  # –û—Å—Ç–∞–≤–ª–µ–Ω, —Ö–æ—Ç—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è README
    }


services = get_services()
github_parser = services["github_parser"]
ast_analyzer = services["ast_analyzer"]
llm_agent = services["llm_agent"]
# doc_generator = services["doc_generator"] # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if "generated_readme" not in st.session_state:
    st.session_state.generated_readme = None
if "error_message" not in st.session_state:
    st.session_state.error_message = None

# --- UI ---
# –®–∞–ø–∫–∞
st.markdown(
    f"""
<div style="display: flex; align-items: center; margin-bottom: 2rem; padding: 1rem; background-color: {LAMODA_BLACK_BG}; border-bottom: 1px solid {LAMODA_MID_GRAY_BORDER};">
    <div style="font-size: 3rem; margin-right: 20px; color: {LAMODA_LIME_ACCENT};">üìÑ</div>
    <div>
        <h1 style="margin: 0; padding: 0; font-weight: 600;">
            <span class="logo-text-la">AI Auto</span><span class="logo-text-tech">Doc</span>
        </h1>
        <div style="color: #AAAAAA; font-size: 1.1rem; margin-top: 5px;">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        </div>
    </div>
</div>
""",
    unsafe_allow_html=True,
)

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.sidebar:
    st.markdown(
        f"""
    <div style="text-align: center; margin-bottom: 20px;">
        <div style="font-size: 2.5rem; color: {LAMODA_LIME_ACCENT}; margin-bottom: 10px;">‚öôÔ∏è</div>
        <h2 style="font-weight: 600; font-size: 1.4rem;">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞</h2>
    </div>
    """,
        unsafe_allow_html=True,
    )

    repo_url = st.text_input(
        "üîó URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
        placeholder="https://github.com/owner/repository",
        help="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π URL –ø—É–±–ª–∏—á–Ω–æ–≥–æ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.",
    )

    # –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ LLM
    available_models = list(LlmAgent.DEFAULT_MODEL_MAPPING.keys())
    selected_model_key = st.selectbox(
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å LLM",
        options=available_models,
        index=available_models.index(
            llm_agent.default_model_key
        ),  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞–≥–µ–Ω—Ç–∞
    )

    # –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è README
    readme_style = st.selectbox(
        "üé® –°—Ç–∏–ª—å README",
        options=["summary", "detailed"],
        index=0,  # "summary" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )

    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    col1, col2 = st.columns(2)

    with col1:
        generate_clicked = st.button(
            "‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å README", type="secondary", use_container_width=True
        )

    with col2:
        update_clicked = st.button(
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å README", type="secondary", use_container_width=True
        )

    if generate_clicked:
        if repo_url:
            st.session_state.generated_readme = None
            st.session_state.error_message = None

            # Log the start of README generation process
            ui_logger.info(
                f"üöÄ Starting README generation process for repository: {repo_url}"
            )

            try:
                with st.spinner("üöÄ –ú–∞–≥–∏—è –ò–ò –≤ –¥–µ–π—Å—Ç–≤–∏–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
                    spinner_placeholder = st.empty()

                    spinner_placeholder.text("1/4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
                    ui_logger.info("üìÅ Step 1/4: Fetching files from repository")
                    files_content = github_parser.get_repo_files_content(repo_url)
                    if not files_content:
                        ui_logger.error("‚ùå Failed to fetch files from repository")
                        st.session_state.error_message = (
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—É—Å—Ç/–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                        )
                        spinner_placeholder.empty()
                        st.rerun()

                    ui_logger.info(
                        f"‚úÖ Step 1/4 completed: Retrieved {len(files_content)} files"
                    )

                    spinner_placeholder.text("2/4: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞ (AST)...")
                    ast_data = ast_analyzer.analyze_repository(files_content)

                    spinner_placeholder.text("3/4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π —Å –ø–æ–º–æ—â—å—é LLM...")
                    # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ —Å—Ç–∏–ª—å, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –≤—ã–±–æ—Ä –≤ UI, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
                    llm_output = llm_agent.generate_readme_content(
                        ast_data,
                        files_content,
                        model_key=selected_model_key,
                        style=readme_style,  # –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
                    )

                    if llm_output.startswith("‚ö†Ô∏è –û—à–∏–±–∫–∞") or llm_output.startswith(
                        "# –û—à–∏–±–∫–∞"
                    ):
                        st.session_state.error_message = f"–û—à–∏–±–∫–∞ –æ—Ç LLM: {llm_output}"
                        spinner_placeholder.empty()
                        st.rerun()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏

                    spinner_placeholder.text(
                        "4/4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ README.md..."
                    )
                    final_readme = llm_output
                    st.session_state.generated_readme = final_readme

                    spinner_placeholder.empty()
                    st.success("üéâ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")

            except Exception as e:
                st.session_state.error_message = (
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                )
                # st.exception(e) # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –≤ UI, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                print(f"UI Error: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
                import traceback

                traceback.print_exc()  # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å–±–µ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞
                if (
                    "spinner_placeholder" in locals()
                ):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                    spinner_placeholder.empty()
                st.rerun()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        else:
            st.sidebar.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.")

    if update_clicked:
        if repo_url:
            st.session_state.generated_readme = None
            st.session_state.error_message = None

            # Log the start of README update process
            ui_logger.info(
                f"üîÑ Starting README update process for repository: {repo_url}"
            )

            try:
                with st.spinner("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
                    spinner_placeholder = st.empty()

                    # Step 1: Check if README exists
                    spinner_placeholder.text(
                        "1/5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è README –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏..."
                    )
                    ui_logger.info("üìã Step 1/5: Checking if README exists")

                    readme_exists = github_parser.check_readme_exists(repo_url)
                    if not readme_exists:
                        st.session_state.error_message = (
                            "‚ùå –í –≤–∞—à–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç README —Ñ–∞–π–ª–∞. "
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å README'."
                        )
                        spinner_placeholder.empty()
                        st.rerun()

                    ui_logger.info("‚úÖ Step 1/5 completed: README exists")

                    # Step 2: Get existing README content
                    spinner_placeholder.text("2/5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ README...")
                    ui_logger.info("üìÑ Step 2/5: Getting existing README content")

                    existing_readme = github_parser.get_existing_readme_content(
                        repo_url
                    )
                    if not existing_readme:
                        st.session_state.error_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ README —Ñ–∞–π–ª–∞."
                        spinner_placeholder.empty()
                        st.rerun()

                    ui_logger.info("‚úÖ Step 2/5 completed: Retrieved existing README")

                    # Step 3: Get recent merged PRs
                    spinner_placeholder.text("3/5: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö merged PR...")
                    ui_logger.info("üîç Step 3/5: Getting recent merged PRs")

                    recent_prs = github_parser.get_recent_merged_prs(repo_url, limit=10)
                    ui_logger.info(
                        f"‚úÖ Step 3/5 completed: Found {len(recent_prs)} recent PRs"
                    )

                    # Check if there are any recent PRs
                    if not recent_prs:
                        st.session_state.error_message = None
                        spinner_placeholder.empty()
                        st.info(
                            "‚ÑπÔ∏è –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö merged Pull Request'–æ–≤. "
                            "README –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                        )
                        ui_logger.info("‚ÑπÔ∏è No recent PRs found, skipping README update")
                    else:
                        # Show info about found PRs
                        spinner_placeholder.text(
                            f"–ù–∞–π–¥–µ–Ω–æ {len(recent_prs)} –Ω–µ–¥–∞–≤–Ω–∏—Ö PR –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞..."
                        )
                        ui_logger.info(
                            f"üìã Found {len(recent_prs)} recent PRs to analyze"
                        )

                        # Step 4: Get current repository state
                        spinner_placeholder.text(
                            "4/5: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
                        )
                        ui_logger.info(
                            "üìÅ Step 4/5: Analyzing current repository state"
                        )

                        files_content = github_parser.get_repo_files_content(repo_url)
                        if not files_content:
                            st.session_state.error_message = (
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                            )
                            spinner_placeholder.empty()
                            st.rerun()

                        ast_data = ast_analyzer.analyze_repository(files_content)
                        ui_logger.info(
                            "‚úÖ Step 4/5 completed: Repository analysis done"
                        )

                        # Step 5: Update README with LLM
                        spinner_placeholder.text(
                            "5/5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ README —Å –ø–æ–º–æ—â—å—é LLM..."
                        )
                        ui_logger.info("ü§ñ Step 5/5: Updating README with LLM")

                        updated_readme = llm_agent.update_readme_content(
                            existing_readme=existing_readme,
                            recent_prs=recent_prs,
                            ast_data=ast_data,
                            files_content=files_content,
                            model_key=selected_model_key,
                            style=readme_style,
                        )

                        if updated_readme.startswith(
                            "‚ö†Ô∏è –û—à–∏–±–∫–∞"
                        ) or updated_readme.startswith("# –û—à–∏–±–∫–∞"):
                            st.session_state.error_message = (
                                f"–û—à–∏–±–∫–∞ –æ—Ç LLM: {updated_readme}"
                            )
                            spinner_placeholder.empty()
                            st.rerun()

                        st.session_state.generated_readme = updated_readme
                        spinner_placeholder.empty()

                        # Check if README was actually updated
                        if updated_readme.strip() == existing_readme.strip():
                            st.info(
                                "‚ÑπÔ∏è README –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é."
                            )
                        else:
                            st.success(
                                "üéâ README —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π!"
                            )

            except Exception as e:
                st.session_state.error_message = (
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ README: {str(e)}"
                )
                print(f"UI Update Error: {e}")
                import traceback

                traceback.print_exc()
                if "spinner_placeholder" in locals():
                    spinner_placeholder.empty()
                st.rerun()
        else:
            st.sidebar.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.")

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞
if st.session_state.error_message:
    st.error(
        f"üö´ {st.session_state.error_message}"
    )  # –£–±—Ä–∞–ª "–û—à–∏–±–∫–∞:" —Ç.–∫. –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–∞–º–æ–π error_message

if st.session_state.generated_readme:
    st.markdown("---")
    st.subheader("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π README.md")
    st.markdown(
        f"""
    <div class="readme-container">
    {st.session_state.generated_readme}
    </div>
    """,
        unsafe_allow_html=True,
    )

    st.download_button(
        label="üíæ –°–∫–∞—á–∞—Ç—å README.md",
        data=st.session_state.generated_readme,
        file_name="README_generated.md",
        mime="text/markdown",
        use_container_width=True,
        type="secondary",  # –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∞–∫—Ü–µ–Ω—Ç–Ω–æ–π –ø–æ –≤–∞—à–∏–º —Å—Ç–∏–ª—è–º
    )

    # üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    st.markdown("---")
    st.markdown("## üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞", unsafe_allow_html=True)

    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    st.markdown(
        f"""
    <div style="background-color:{LAMODA_DARK_GRAY_SUBTLE}; padding: 1.5rem; border-radius: 12px; border: 1px solid {LAMODA_MID_GRAY_BORDER}; margin-bottom: 2rem;">
    <h4 style="color: {LAMODA_LIME_ACCENT}; margin-bottom: 1rem;">üìÅ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏</h4>
    """,
        unsafe_allow_html=True,
    )

    # --- 1. –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    file_extensions = [
        file.split(".")[-1] for file in files_content.keys() if "." in file
    ]
    ext_counts = pd.Series(file_extensions).value_counts()
    fig1, ax1 = plt.subplots()
    ax1.pie(
        ext_counts.values, labels=ext_counts.index, autopct="%1.1f%%", startangle=140
    )
    ax1.axis("equal")
    st.pyplot(fig1)

    st.markdown("</div>", unsafe_allow_html=True)

    # --- 2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (treemap)
    st.markdown(
        f"""
    <div style="background-color:{LAMODA_DARK_GRAY_SUBTLE}; padding: 1.5rem; border-radius: 12px; border: 1px solid {LAMODA_MID_GRAY_BORDER}; margin-bottom: 2rem;">
    <h4 style="color: {LAMODA_LIME_ACCENT}; margin-bottom: 1rem;">üß± –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —Ä–∞–∑–º–µ—Ä–∞–º —Ñ–∞–π–ª–æ–≤)</h4>
    """,
        unsafe_allow_html=True,
    )

    tree_df = pd.DataFrame(
        [{"path": f, "size": len(content)} for f, content in files_content.items()]
    )
    fig2 = px.treemap(
        tree_df, path=["path"], values="size", title="Treemap", height=400
    )
    st.plotly_chart(fig2, use_container_width=True)

    st.markdown("</div>", unsafe_allow_html=True)

    # --- 3. –ü—Ä–∏–º–µ—Ä –¥–∏–∞–≥—Ä–∞–º–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–ø—Ä–æ—Å—Ç–∞—è C4)
    st.markdown(
        f"""
    <div style="background-color:{LAMODA_DARK_GRAY_SUBTLE}; padding: 1.5rem; border-radius: 12px; border: 1px solid {LAMODA_MID_GRAY_BORDER};">
    <h4 style="color: {LAMODA_LIME_ACCENT}; margin-bottom: 1rem;">üß† –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (C4-–ø—Ä–∏–º–µ—Ä)</h4>
    <p style="color: #AAAAAA;">–î–∏–∞–≥—Ä–∞–º–º–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
    """,
        unsafe_allow_html=True,
    )

    G = nx.DiGraph()
    G.add_edges_from(
        [
            ("üë§ User", "üåê API"),
            ("üåê API", "üîß Service"),
            ("üîß Service", "üíæ Repository"),
            ("üíæ Repository", "üóÑÔ∏è Database"),
        ]
    )
    fig3, ax3 = plt.subplots(figsize=(6, 4))
    nx.draw(
        G,
        with_labels=True,
        node_color="#CDFE00",
        edge_color="gray",
        node_size=3000,
        font_size=10,
        font_weight="bold",
        ax=ax3,
    )
    st.pyplot(fig3)

    st.markdown("</div>", unsafe_allow_html=True)

elif (
    not st.session_state.error_message
):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ –∏ –Ω–µ—Ç README
    st.info(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! "
        "–í–≤–µ–¥–∏—Ç–µ URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    st.markdown(
        f"""
    #### üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

    **‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å README** - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ README —Ñ–∞–π–ª–∞ —Å –Ω—É–ª—è:
    1.  –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    2.  –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞ (AST).
    3.  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é LLM.
    4.  –ì–æ—Ç–æ–≤—ã–π <span class="lamoda-lime-text">`README.md`</span> –¥–ª—è –≤–∞—Å!

    **üîÑ –û–±–Ω–æ–≤–∏—Ç—å README** - –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ README:
    1.  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è README –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
    2.  –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö merged Pull Request'–æ–≤.
    3.  –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö PR - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    4.  –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞.
    5.  –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    )

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.markdown(
    f"""
<div style="text-align: center; padding: 2rem 0; background: linear-gradient(135deg, {LAMODA_DARK_GRAY_SUBTLE} 0%, rgba(26,26,26,0.5) 100%); border-radius: 12px; margin-top: 2rem;">
    <div style="font-size: 1rem; color: {LAMODA_LIGHT_GRAY_TEXT}; margin-bottom: 0.5rem;">
        –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π MISISxHSExITMO –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ Orion Soft
    </div>
    <div style="font-size: 1.2rem; font-weight: 600;">
        <span class="logo-text-la">lamoda</span><span class="logo-text-tech">tech</span> <span style="color: {LAMODA_LIGHT_GRAY_TEXT};"></span>
    </div>
</div>
""",
    unsafe_allow_html=True,
)
