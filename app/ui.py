# app/ui.py
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ 'app') –≤ sys.path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
if project_root not in sys.path:
    sys.path.insert(0, project_root)
import io
import logging
import zipfile
from pathlib import Path

import streamlit as st
from dotenv import load_dotenv

from app.services.architecture_analyzer import ArchitectureAnalyzer
from app.services.ast_analyzer import AstAnalyzer
from app.services.doc_generator import (
    DocGenerator,  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ README, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω
)
from app.services.github_parser import GithubParser
from app.services.llm_agent import LlmAgent  # –£–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –≤—Å–µ –æ–∫

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞

# Configure logging for main UI
logging.basicConfig(level=logging.INFO)
ui_logger = logging.getLogger("ui_main")

# --- –ù–æ–≤—ã–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ Lamoda Tech ---
LAMODA_LIME_ACCENT = "#CDFE00"
LAMODA_BLACK_BG = "#000000"
LAMODA_WHITE_TEXT = "#FFFFFF"
LAMODA_BLACK_TEXT_ON_LIME = "#000000"
LAMODA_DARK_GRAY_SUBTLE = "#1A1A1A"
LAMODA_MID_GRAY_BORDER = "#333333"
LAMODA_LIGHT_GRAY_TEXT = "#B8B8B8"

st.set_page_config(
    page_title="AI AutoDoc Generator",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.markdown(
    f"""
<style>
    /* ... (–≤–∞—à–∏ —Å—Ç–∏–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */
    body {{
        color: {LAMODA_WHITE_TEXT};
    }}
    .main .block-container {{
        background-color: {LAMODA_BLACK_BG};
        padding-top: 2rem;
        padding-bottom: 2rem;
        color: {LAMODA_WHITE_TEXT};
    }}
    .stButton button {{
        border-radius: 8px;
        font-weight: 600;
        border: none;
        padding: 0.6rem 1.2rem;
    }}
    .stButton button[data-testid="baseButton-secondary"],
    .stDownloadButton button {{
        background-color: {LAMODA_LIME_ACCENT};
        color: {LAMODA_BLACK_TEXT_ON_LIME};
    }}
    .stButton button[data-testid="baseButton-secondary"]:hover,
    .stDownloadButton button:hover {{
        background-color: #B8E400;
        color: {LAMODA_BLACK_TEXT_ON_LIME};
    }}
    .stTextInput input,
    .stSelectbox div[data-baseweb="select"] > div,
    .stTextArea textarea {{
        background-color: {LAMODA_DARK_GRAY_SUBTLE};
        color: {LAMODA_WHITE_TEXT};
        border: 1px solid {LAMODA_MID_GRAY_BORDER};
        border-radius: 8px;
    }}
    .stTextInput input:focus,
    .stTextArea textarea:focus {{
        border-color: {LAMODA_LIME_ACCENT};
        box-shadow: 0 0 0 0.1rem {LAMODA_LIME_ACCENT}40;
    }}
    .stTextInput ::placeholder,
    .stTextArea ::placeholder {{
        color: #888888;
    }}
    .sidebar .sidebar-content {{
        background-color: {LAMODA_BLACK_BG};
        padding: 2rem 1.5rem;
    }}
    div[data-testid="stSidebarNavItems"] {{
        padding-top: 1rem;
    }}
    .sidebar .sidebar-content h1,
    .sidebar .sidebar-content h2,
    .sidebar .sidebar-content h3,
    .sidebar .sidebar-content p,
    .sidebar .sidebar-content label {{
        color: {LAMODA_WHITE_TEXT} !important;
    }}
    h1, h2, h3, h4, h5, h6 {{
        color: {LAMODA_WHITE_TEXT};
        font-weight: 600;
    }}
    .lamoda-lime-text {{
        color: {LAMODA_LIME_ACCENT};
    }}
    .readme-container {{
        background-color: {LAMODA_DARK_GRAY_SUBTLE};
        color: {LAMODA_WHITE_TEXT};
        padding: 1.5rem;
        border-radius: 8px;
        border: 1px solid {LAMODA_MID_GRAY_BORDER};
        margin-top: 1.5rem;
        max-height: 70vh;
        overflow-y: auto;
    }}
    .readme-container h1, .readme-container h2, .readme-container h3 {{
        margin-top: 1em;
        margin-bottom: 0.5em;
        color: {LAMODA_LIME_ACCENT};
    }}
    .readme-container p {{
        line-height: 1.6;
        color: {LAMODA_WHITE_TEXT};
    }}
    .readme-container code {{
        background-color: {LAMODA_MID_GRAY_BORDER};
        color: {LAMODA_LIME_ACCENT};
        padding: 0.2em 0.4em;
        border-radius: 4px;
        font-size: 0.9em;
    }}
    .readme-container pre {{
        background-color: {LAMODA_BLACK_BG};
        border: 1px solid {LAMODA_MID_GRAY_BORDER};
        padding: 1em;
        border-radius: 6px;
        overflow-x: auto;
    }}
    .readme-container pre code {{
        background-color: transparent !important;
        color: {LAMODA_WHITE_TEXT};
        padding: 0;
    }}
    .logo-text-la {{
        color: {LAMODA_WHITE_TEXT};
    }}
    .logo-text-tech {{
        color: {LAMODA_LIME_ACCENT};
        font-weight: 700;
    }}
</style>
""",
    unsafe_allow_html=True,
)


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ ---
@st.cache_resource
def get_services():
    github_token = os.getenv("GITHUB_TOKEN_AUTODOC")
    openrouter_api_key = os.getenv("OPENROUTER_API_KEY")
    if not github_token:
        st.sidebar.error(
            "GITHUB_TOKEN_AUTODOC –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ."
        )
        st.stop()
    if not openrouter_api_key:
        st.sidebar.warning(
            "OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LLM –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É."
        )
    return {
        "github_parser": GithubParser(github_token=github_token),
        "ast_analyzer": AstAnalyzer(),
        "architecture_analyzer": ArchitectureAnalyzer(),
        "llm_agent": LlmAgent(openrouter_api_key=openrouter_api_key),
        "doc_generator": DocGenerator(template_dir="app/templates"),
    }


services = get_services()
github_parser = services["github_parser"]
ast_analyzer = services["ast_analyzer"]
architecture_analyzer = services["architecture_analyzer"]
llm_agent = services["llm_agent"]


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ZIP –∞—Ä—Ö–∏–≤–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π ---
def create_docs_zip(docs_dict):
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zip_file:
        for file_path, content in docs_dict.items():
            zip_file.writestr(file_path, content)
    return zip_buffer.getvalue()


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º ---
def group_files_by_folder(files_content):
    folders = {}
    for file_path, content in files_content.items():
        path_parts = Path(file_path).parts
        if len(path_parts) > 1:
            folder = path_parts[0]
        else:
            folder = "root"

        if folder not in folders:
            folders[folder] = {}
        folders[folder][file_path] = content

    return folders


# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if "generated_readme" not in st.session_state:
    st.session_state.generated_readme = None
if "last_action" not in st.session_state:
    st.session_state.last_action = None
if "last_pr_number" not in st.session_state:
    st.session_state.last_pr_number = None
if "generated_docs" not in st.session_state:
    st.session_state.generated_docs = None
if "error_message" not in st.session_state:
    st.session_state.error_message = None

# --- UI ---
# –®–∞–ø–∫–∞
st.markdown(
    f"""
<div style="display: flex; align-items: center; margin-bottom: 2rem; padding: 1rem; background-color: {LAMODA_BLACK_BG}; border-bottom: 1px solid {LAMODA_MID_GRAY_BORDER};">
    <div style="font-size: 3rem; margin-right: 20px; color: {LAMODA_LIME_ACCENT};">üìÑ</div>
    <div>
        <h1 style="margin: 0; padding: 0; font-weight: 600;">
            <span class="logo-text-la">AI Auto</span><span class="logo-text-tech">Doc</span>
        </h1>
        <div style="color: #AAAAAA; font-size: 1.1rem; margin-top: 5px;">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        </div>
    </div>
</div>
""",
    unsafe_allow_html=True,
)

# –°–∞–π–¥–±–∞—Ä –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.sidebar:
    st.markdown(
        f"""
    <div style="text-align: center; margin-bottom: 20px;">
        <div style="font-size: 2.5rem; color: {LAMODA_LIME_ACCENT}; margin-bottom: 10px;">‚öôÔ∏è</div>
        <h2 style="font-weight: 600; font-size: 1.4rem;">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞</h2>
    </div>
    """,
        unsafe_allow_html=True,
    )

    repo_url = st.text_input(
        "üîó URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
        placeholder="https://github.com/owner/repository",
        help="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π URL –ø—É–±–ª–∏—á–Ω–æ–≥–æ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏).",
    )

    # –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ LLM
    available_models = list(LlmAgent.DEFAULT_MODEL_MAPPING.keys())
    selected_model_key = st.selectbox(
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å LLM",
        options=available_models,
        index=available_models.index(llm_agent.default_model_key),
    )

    # –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    doc_mode = st.selectbox(
        "üìö –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
        options=["single_readme", "docs_folder"],
        format_func=lambda x: (
            "üìÑ –û–¥–∏–Ω README.md"
            if x == "single_readme"
            else "üìÅ –ü–∞–ø–∫–∞ docs (MD –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏)"
        ),
        index=0,
    )

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL PR
    pr_url = st.text_input(
        "üîó URL Pull Request –¥–ª—è Release Notes",
        placeholder="https://github.com/owner/repo/pull/123",
        help="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Pull Request –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ release notes",
    )

    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    col1, col2 = st.columns(2)
    with col1:
        generate_clicked = st.button(
            "‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", type="secondary", use_container_width=True
        )
    with col2:
        release_notes_clicked = st.button(
            "üìù Release Notes", type="secondary", use_container_width=True
        )

    if generate_clicked:
        if repo_url:
            st.session_state.generated_readme = None
            st.session_state.generated_docs = None
            st.session_state.error_message = None
            st.session_state.last_action = "generate"
            st.session_state.last_pr_number = None

            ui_logger.info(
                f"üöÄ Starting documentation generation process for repository: {repo_url}"
            )

            try:
                with st.spinner("üöÄ –ú–∞–≥–∏—è –ò–ò –≤ –¥–µ–π—Å—Ç–≤–∏–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."):
                    spinner_placeholder = st.empty()
                    spinner_placeholder.text("1/4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
                    ui_logger.info("üìÅ Step 1/4: Fetching files from repository")

                    files_content = github_parser.get_repo_files_content(repo_url)
                    if not files_content:
                        ui_logger.error("‚ùå Failed to fetch files from repository")
                        st.session_state.error_message = (
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—É—Å—Ç/–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                        )
                        spinner_placeholder.empty()
                        st.rerun()

                    ui_logger.info(
                        f"‚úÖ Step 1/4 completed: Retrieved {len(files_content)} files"
                    )

                    spinner_placeholder.text("2/4: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞ (AST)...")
                    ast_data = ast_analyzer.analyze_repository(files_content)

                    if doc_mode == "single_readme":
                        spinner_placeholder.text(
                            "3/4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README —Å –ø–æ–º–æ—â—å—é LLM..."
                        )
                        llm_output = llm_agent.generate_readme_content(
                            ast_data,
                            files_content,
                            model_key=selected_model_key,
                            style="summary",
                        )

                        if llm_output.startswith("‚ö†Ô∏è –û—à–∏–±–∫–∞") or llm_output.startswith(
                            "# –û—à–∏–±–∫–∞"
                        ):
                            st.session_state.error_message = (
                                f"–û—à–∏–±–∫–∞ –æ—Ç LLM: {llm_output}"
                            )
                            spinner_placeholder.empty()
                            st.rerun()

                        spinner_placeholder.text(
                            "4/4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ README.md..."
                        )
                        st.session_state.generated_readme = llm_output

                    else:  # docs_folder
                        spinner_placeholder.text("3/4: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º...")
                        folders = group_files_by_folder(files_content)

                        spinner_placeholder.text(
                            "4/4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏..."
                        )
                        docs_dict = {}

                        for folder_name, folder_files in folders.items():
                            folder_ast_data = ast_analyzer.analyze_repository(
                                folder_files
                            )

                            doc_content = llm_agent.generate_folder_documentation(
                                folder_name=folder_name,
                                ast_data=folder_ast_data,
                                files_content=folder_files,
                                model_key=selected_model_key,
                            )

                            if not doc_content.startswith(
                                "‚ö†Ô∏è –û—à–∏–±–∫–∞"
                            ) and not doc_content.startswith("# –û—à–∏–±–∫–∞"):
                                docs_dict[f"docs/{folder_name}.md"] = doc_content

                        if docs_dict:
                            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π README –¥–ª—è –ø–∞–ø–∫–∏ docs
                            main_readme = llm_agent.generate_main_docs_readme(
                                folders=list(folders.keys()),
                                ast_data=ast_data,
                                model_key=selected_model_key,
                            )
                            docs_dict["docs/README.md"] = main_readme
                            st.session_state.generated_docs = docs_dict
                        else:
                            st.session_state.error_message = (
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –ø–∞–ø–æ–∫."
                            )
                            spinner_placeholder.empty()
                            st.rerun()

                    spinner_placeholder.empty()
                    st.success("üéâ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")

            except Exception as e:
                st.session_state.error_message = (
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                )
                print(f"UI Error: {e}")
                import traceback

                traceback.print_exc()
                if "spinner_placeholder" in locals():
                    spinner_placeholder.empty()
                st.rerun()
        else:
            st.sidebar.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.")

    if release_notes_clicked:
        if pr_url:
            st.session_state.generated_readme = None
            st.session_state.generated_docs = None
            st.session_state.error_message = None
            st.session_state.last_action = "release_notes"

            ui_logger.info(f"üìù Starting release notes generation for PR URL: {pr_url}")

            try:
                with st.spinner(
                    f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Release Notes –¥–ª—è PR... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                ):
                    spinner_placeholder = st.empty()

                    spinner_placeholder.text(f"1/2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PR...")
                    ui_logger.info(f"üìã Step 1/2: Fetching PR details from URL")

                    pr_info = github_parser.get_pr_details_by_url(pr_url)
                    if not pr_info:
                        st.session_state.error_message = (
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ PR –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ. "
                            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PR —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                        )
                        spinner_placeholder.empty()
                        st.rerun()

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä PR –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    st.session_state.last_pr_number = pr_info.get("number")

                    spinner_placeholder.text(
                        f"2/2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Release Notes —Å –ø–æ–º–æ—â—å—é LLM..."
                    )
                    ui_logger.info(f"ü§ñ Step 2/2: Generating release notes with LLM")

                    release_notes = llm_agent.generate_release_notes(
                        pr_info=pr_info,
                        model_key=selected_model_key,
                    )

                    if release_notes.startswith("‚ö†Ô∏è –û—à–∏–±–∫–∞") or release_notes.startswith(
                        "# –û—à–∏–±–∫–∞"
                    ):
                        st.session_state.error_message = (
                            f"–û—à–∏–±–∫–∞ –æ—Ç LLM: {release_notes}"
                        )
                        spinner_placeholder.empty()
                        st.rerun()

                    st.session_state.generated_readme = release_notes
                    spinner_placeholder.empty()
                    st.success(
                        f"üéâ Release Notes –¥–ª—è PR #{pr_info.get('number')} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
                    )

            except Exception as e:
                st.session_state.error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ release notes: {str(e)}"
                print(f"UI Release Notes Error: {e}")
                import traceback

                traceback.print_exc()
                if "spinner_placeholder" in locals():
                    spinner_placeholder.empty()
                st.rerun()
        else:
            st.sidebar.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL Pull Request.")

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞
if st.session_state.error_message:
    st.error(f"üö´ {st.session_state.error_message}")

if st.session_state.generated_readme:
    st.markdown("---")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
    if (
        st.session_state.last_action == "release_notes"
        and st.session_state.last_pr_number
    ):
        st.subheader(f"üìù Release Notes –¥–ª—è PR #{st.session_state.last_pr_number}")
        download_label = "üíæ –°–∫–∞—á–∞—Ç—å Release Notes"
        file_name = f"release_notes_PR_{st.session_state.last_pr_number}.md"
    else:
        st.subheader("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π README.md")
        download_label = "üíæ –°–∫–∞—á–∞—Ç—å README.md"
        file_name = "README_generated.md"

    st.markdown(
        f"""
    <div class="readme-container">
    {st.session_state.generated_readme}
    </div>
    """,
        unsafe_allow_html=True,
    )
    st.download_button(
        label=download_label,
        data=st.session_state.generated_readme,
        file_name=file_name,
        mime="text/markdown",
        use_container_width=True,
        type="secondary",
    )

if st.session_state.generated_docs:
    st.markdown("---")
    st.subheader("üìÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–∞–ø–æ–∫")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for file_path, content in st.session_state.generated_docs.items():
        with st.expander(f"üìÑ {file_path}"):
            st.markdown(
                f"""
            <div class="readme-container">
            {content}
            </div>
            """,
                unsafe_allow_html=True,
            )

    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ZIP –∞—Ä—Ö–∏–≤–∞
    zip_data = create_docs_zip(st.session_state.generated_docs)
    st.download_button(
        label="üì¶ –°–∫–∞—á–∞—Ç—å –ø–∞–ø–∫—É docs (ZIP)",
        data=zip_data,
        file_name="docs_generated.zip",
        mime="application/zip",
        use_container_width=True,
        type="secondary",
    )


elif not st.session_state.error_message and not st.session_state.generated_docs:
    st.info(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    st.markdown(
        f"""
    #### üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
    **üìÑ –û–¥–∏–Ω README.md** - —Å–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ README —Ñ–∞–π–ª–∞:
    1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    2. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞ (AST)
    3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    4. –ì–æ—Ç–æ–≤—ã–π README.md –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

    **üìÅ –ü–∞–ø–∫–∞ docs** - —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:
    1. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞
    2. –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MD —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
    4. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ README.md –¥–ª—è –ø–∞–ø–∫–∏ docs
    5. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ —Å –ø–æ–ª–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π

    **üìù Release Notes** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Pull Request:
    1. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ PR (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://github.com/owner/repo/pull/123)
    2. –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö –∏ –∫–æ–º–º–∏—Ç–∞—Ö
    3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö release notes
    4. –ì–æ—Ç–æ–≤—ã–π changelog –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    """
    )

st.markdown("---")
st.markdown(
    f"""
<div style="text-align: center; padding: 2rem 0; background: linear-gradient(135deg, {LAMODA_DARK_GRAY_SUBTLE} 0%, rgba(26,26,26,0.5) 100%); border-radius: 12px; margin-top: 2rem;">
    <div style="font-size: 1rem; color: {LAMODA_LIGHT_GRAY_TEXT}; margin-bottom: 0.5rem;">
        –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π MISISxHSExITMO –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ Orion Soft
    </div>
    <div style="font-size: 1.2rem; font-weight: 600;">
        <span class="logo-text-la">lamoda</span><span class="logo-text-tech">tech</span> <span style="color: {LAMODA_LIGHT_GRAY_TEXT};"></span>
    </div>
</div>
""",
    unsafe_allow_html=True,
)
