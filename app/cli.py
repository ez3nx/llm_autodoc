#!/usr/bin/env python3
import os
import click
from dotenv import load_dotenv

from app.services.github_parser import GithubParser
from app.services.llm_agent import LlmAgent
from app.services.ast_analyzer import AstAnalyzer  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –æ–Ω –≤—Å—ë-—Ç–∞–∫–∏ –Ω—É–∂–µ–Ω

@click.command()
@click.option('--repo', prompt="üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", help="URL –ø—É–±–ª–∏—á–Ω–æ–≥–æ GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
@click.option('--style', default='summary', type=click.Choice(['summary', 'detailed']), help="–°—Ç–∏–ª—å README: summary –∏–ª–∏ detailed")
@click.option('--model', default='gemini-flash', type=click.Choice([
    'claude-sonnet', 'gemini-flash', 'gpt-4o-mini'
]), help="–ú–æ–¥–µ–ª—å LLM")
@click.option('--output', default='README.generated.md', help="–§–∞–π–ª –≤—ã–≤–æ–¥–∞")
def generate_readme(repo, style, model, output):
    """‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README.md —Å –ø–æ–º–æ—â—å—é LLM"""

    load_dotenv()

    github_token = os.getenv("GITHUB_TOKEN_AUTODOC")
    openrouter_key = os.getenv("OPENROUTER_API_KEY")

    if not github_token or not openrouter_key:
        click.echo("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª.")
        return

    click.echo(f"üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo}")
    parser = GithubParser(github_token)
    files_content = parser.get_repo_files_content(repo_url=repo)

    if not files_content:
        click.echo("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.")
        return

    click.echo(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_content)}")

    click.echo("üß† –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    analyzer = AstAnalyzer()
    ast_data = analyzer.analyze_repository(files_content)

    click.echo(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é LLM ({model}, —Å—Ç–∏–ª—å: {style})...")
    agent = LlmAgent(openrouter_api_key=openrouter_key, default_model=model)
    readme = agent.generate_readme_content(ast_data, files_content, style=style)

    with open(output, "w", encoding="utf-8") as f:
        f.write(readme)

    click.echo(f"‚úÖ README —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {output}")

if __name__ == "__main__":
    generate_readme()
